//C++ get precision
std::numeric_limits<long double>::digits10

//C++ get rounding mode
#include <cfenv>
#include <iostream>

int main() {
    int mode = std::fegetround();
    switch (mode) {
        case FE_TONEAREST:  std::cout << "Round to nearest (default)\n"; break;
        case FE_DOWNWARD:   std::cout << "Round downward (-∞)\n"; break;
        case FE_UPWARD:     std::cout << "Round upward (+∞)\n"; break;
        case FE_TOWARDZERO: std::cout << "Round toward zero\n"; break;
        default:            std::cout << "Unknown rounding mode\n";
    }
}


//C++ set the rounding mode using std::fesetround():

std::fesetround(FE_TONEAREST);  // Round to nearest (default)
std::fesetround(FE_UPWARD);     // Round toward +infinity
std::fesetround(FE_DOWNWARD);   // Round toward -infinity
std::fesetround(FE_TOWARDZERO); // Round toward zero

Each macro (FE_TONEAREST, FE_UPWARD, etc.) is defined in <cfenv>.

//C++ templates

// @brief basic sign function

template <typename T>
int sgn(T val) {
    return (T(0) < val) - (val < T(0));
}

// @brief basic fractional part function

template<typename T>
T frac(T x) {
    return x - std::trunc(x);
}

